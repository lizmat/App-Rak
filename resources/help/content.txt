Content modifiers:
‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒

--backup[=extension]

Only makes sense when the --modify-files is also specified.  Indicates
whether backups should be made when a file is modified.  If an extension
is specified, then that will be added to the name of the file.  If
specified as a flag, then ".bak" will be assumed.  Defaults to not
making any backup.

--dryrun

Only makes sense when either the --modify-files or --rename-files is
also specified.  Indicates that *no* actual changes should be performed.
Defaults to False, allowing for changes to be made.

--modifications

Indicate whether modifications with --modify-files and --rename-files
are allowed.  Defaults to True, hence it will probably only be actually
used in the negation case: --no-modifications or --/modifications to
disallow making any modifications.

--modify-files

Only makes sense with a Callable pattern.  Indicates that the inspected
files may be potentially changed.  If the value returned by the
Callable pattern is not True/False/Nil/Empty and different from the
given line, then that line will be replaced by the returned value(s).
Else it will be kept unchanged because of an implicit --passthru-context
argument being active.

Files are presented in a sorted order, allowing for repeatable and
ordered modification.  The $*N dynamic variable (initialized to 0) is
available to the pattern, to allow keeping state between files.

Defaults to False, indicating that files should **not** be changed.  Can
also specify --dryrun to see which files would be changed without actually
making any changes.

By default, lines will be presented **without** their line ending.
If you want to have them included, specify --with-line-endings.

--rename-files

Only makes sense with a Callable pattern.  Assumes --find semantics
if specified.  Indicates that the names of the selected files may be
potentially changed.  If the value returned by the Callable pattern
is not True/False/Nil/Empty and different from the given filename,
then the name of the file will be replaced by the returned value.
Defaults to False, indicating that no files will be renamed.

Files are presented in a sorted order, allowing for repeatable and
ordered renaming.  The $*N dynamic variable (initialized to 0) is
available to the pattern, to allow keeping state between files.

If a file is under version control (currently only
"git" is supported) will make sure that the version control system
will be aware of the rename.  Can also specify --dryrun to see which
files would be renamed without actually making any changes.
